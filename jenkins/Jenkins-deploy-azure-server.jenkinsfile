
node('AWS_MFL_Node') {

        environment {
          AZURE_CLIENT_ID = credentials('AZURE_CLIENT_ID') // Store client ID in Jenkins credentials
          AZURE_CLIENT_SECRET = credentials('AZURE_CLIENT_SECRET') // Store client secret
          AZURE_TENANT_ID = credentials('AZURE_TENANT_ID') // Store tenant ID
          AZURE_SUBSCRIPTION_ID = '<your-subscription-id>'
          RESOURCE_GROUP = '<your-resource-group>'
          APP_NAME = '<your-app-name>'
          REGION = '<your-region>'
          RUNTIME = '<runtime>' // e.g., "DOTNETCORE|7.0"
        }

        stage('Clean Directory') {
            timeout(time: 30, unit: 'MINUTES') {
              try {
                  if (fileExists('code-push-server')) {
                    bat 'rmdir /S /Q code-push-server' // For Windows
                  }
              } catch (exception) {
                  echo "Code push clean directory failed: ${exception}"
              }
            }
        }

        stage('Clone Code Push Server Repository') {
            timeout(time: 30, unit: 'MINUTES') {
                try {
                  bat "git clone https://github.com/ServiceMax-Engineering/code-push-server.git"
                } catch(exception) {
                  echo "Clone Code push server failed: ${exception}"
                }
            }
        }
        
        stage('Install CLI Globally') {
            timeout(time: 30, unit: 'MINUTES') {
               try {
                  dir('code-push-server/cli') {
                    bat 'npm install'
                    bat 'npm run build'
                    bat 'npm install -g .'
                  }
              } catch(exception) {
                  echo "Code push server CLI failed: ${exception}"
              }
            }
        }

        stage('Install Dependencies for API or Server') {
            timeout(time: 30, unit: 'MINUTES') {
               try {
                  dir('code-push-server/api') {
                    bat 'npm install'
                    bat 'npm run build'
                  }
              } catch(exception) {
                  echo "Install Dependencies for API or Server failed: ${exception}"
              }
            }
        }

        stage('Install Azure CLI') {
            timeout(time: 90, unit: 'MINUTES') {
              try {
                dir('code-push-server/api') {
                    bat """
                        @echo off
                        az --version
                        IF %ERRORLEVEL% EQU 0 (
                            echo Azure CLI is already installed.
                            EXIT /B 0
                        )
                        powershell -Command "Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile AzureCLI.msi"
                        msiexec /i AzureCLI.msi /quiet /norestart
                        del AzureCLI.msi
                        az --version
                    """
                }
              } catch (exception) {
                  echo "Install Azure CLI failed: ${exception}"
              }
            }
        }
        
        stage('Deploy to Azure App Service') {
            timeout(time: 30, unit: 'MINUTES') {
              try {
                dir('code-push-server/api') {
                    bat """
                      az login --service-principal --username %AZURE_CLIENT_ID% --password %AZURE_CLIENT_SECRET% --tenant %AZURE_TENANT_ID%
                      az account set --subscription %AZURE_SUBSCRIPTION_ID%
                      az webapp up --name %APP_NAME% --resource-group %RESOURCE_GROUP% --location %REGION% --runtime "%RUNTIME%"
                    """
                }
              } catch (exception) {
                  echo "Deploy to Azure App Service failed: ${exception}"
              }
            }
        }
}