/*
    1. To execute this job, first we need to execute Jenkins-register Job. This will give access key and paste it in terminal or command line. Please
    save this access key in Jenkins env variable.
    2. Once above step is done then only we have to run this job.
    3. Once this job is done then it will generate Staging and Production Deployment keys. Please save them in Jenkins' Env variable.
*/


properties([
  parameters(
    [booleanParam(
      name: 'PRODUCTION_INSTANCE',
      defaultValue: true,
      description: 'Register or Autheticate Jenkin Job with Dev Instance or Production Instance and get the access key'
    ),
    choice(
      choices: ['ServiceMaxGo-Windows', 'ServiceMaxGo-iOS', 'ServiceMaxGo-Android'].join('\n'),
      description: 'Select Code Push registered Application Name',
      name: 'CODEPUSH_APPLICATION_NAME'
    ),
    string(
      name: "CODEPUSH_TARGET_VERSION",
      defaultValue: "",
      description: "Codepush Target binary version(e.g 7.0.0)"
    ), 
    string(
      name: "CODEPUSH_DESCRIPTION",
      defaultValue: "",
      description: "Enter the description for the codepush release"
    ), 
    choice(
      choices: ['Staging', 'Production'].join('\n'),
      description: 'Select \'Staging\' for ServiceMax AppCenter Dev testing.\nSelect \'Production\' for ServiceMax AppCenter  Production',
      name: 'CODEPUSH_DEPLOYMENT_MODE'
    ), 
    string(
      name: "RELEASE_BRANCH_NAME",
      defaultValue: "",
      description: "ufsa-windows or ufsa relese branch name(e.g release-11.0)"
    ), 
    string(
      name: "ARTIFACT_BUILD_VERSION",
      defaultValue: "",
      description: "Enter the valid build version from which we need to copy the artifact"
    ), 
    choice(
      choices: ['ReleaseOps/ServiceMax-Engineering/ufsa-windows', 'ReleaseOps/ServiceMax-Engineering/ufsa'].join('\n'),
      description: 'Select the Project Name',
      name: 'PROJECT_NAME'
    )]
  )
])


def SERVER_URL = 'https://codepush-dev2.azurewebsites.net'
def CODEPUSH_APPLICATION_NAME = "";
def CODEPUSH_DEPLOYMENT_MODE = ""
def CODEPUSH_DESCRIPTION = ""
def CODEPUSH_TARGET_VERSION = ""
def RELEASE_BRANCH_NAME = ""
def ARTIFACT_BUILD_VERSION = ""
def PROJECT_NAME = ""
try {
  if (env.PRODUCTION_INSTANCE != null && env.PRODUCTION_INSTANCE.toBoolean()) {
    // Use Production Server Url here
    SERVER_URL = 'https://codepush-dev2.azurewebsites.net'
  }

  if (env.RELEASE_BRANCH_NAME) {
    RELEASE_BRANCH_NAME = env.RELEASE_BRANCH_NAME;
  }

  if (env.CODEPUSH_APPLICATION_NAME) {
    CODEPUSH_APPLICATION_NAME = env.CODEPUSH_APPLICATION_NAME
  }

  if (env.CODEPUSH_DEPLOYMENT_MODE) {
    CODEPUSH_DEPLOYMENT_MODE = env.CODEPUSH_DEPLOYMENT_MODE;
  }

  if (env.CODEPUSH_TARGET_VERSION) {
    CODEPUSH_TARGET_VERSION = env.CODEPUSH_TARGET_VERSION
  }

  if (env.ARTIFACT_BUILD_VERSION) {
    ARTIFACT_BUILD_VERSION = env.ARTIFACT_BUILD_VERSION
  }

  if (env.PROJECT_NAME) {
    PROJECT_NAME = env.PROJECT_NAME
  }

  if (env.CODEPUSH_DESCRIPTION) {
    CODEPUSH_DESCRIPTION = env.CODEPUSH_DESCRIPTION
  }

} catch (all) {
  // Mode hasn't been provided, will fall back to 'debug'
  // This might happen on first build of a PR or if you blank out the MDOE
}

node('AWS_MFL_Node') {

    try {

        def id = env.BUILD_ID
        def version = "12.0.0.${id}"
        def bundleArtifactPath = ''
        def zipArtifactPath = ''

        currentBuild.displayName = "${version}"
        
        // if (!RELEASE_BRANCH_NAME.startsWith("release-")) {
        //     throw new Exception("Invalid branch name. The branch name should start with release-")
        // }

        if(!RELEASE_BRANCH_NAME || RELEASE_BRANCH_NAME == '') {
            throw new Exception("Branch name is needed")
        }
        
        if(!CODEPUSH_TARGET_VERSION || CODEPUSH_TARGET_VERSION == '') {
            throw new Exception("Target version is needed")
        }
        
        if(!CODEPUSH_DEPLOYMENT_MODE || CODEPUSH_DEPLOYMENT_MODE == '') {
            throw new Exception("Deploymenet Mode is needed")
        }
        
        if(!CODEPUSH_APPLICATION_NAME || CODEPUSH_APPLICATION_NAME == '') {
            throw new Exception("Code Push Application name is needed")
        }
        
        def pattern = "(^(1|[1-9]\\d*)\\.?(\\d+\\.)?(\\*|\\d+)\$)"
        
        if(CODEPUSH_TARGET_VERSION == ''){
            throw new Exception("Codepush Target version is not specified")
        }
        if(!CODEPUSH_TARGET_VERSION.matches(pattern)){
            throw new Exception("Invalid Codepush Target Version")
        }

        if(ARTIFACT_BUILD_VERSION == ''){
            throw new Exception("Artifact Build version is not specified")
        }

        if(PROJECT_NAME == ''){
            throw new Exception("Project Name is not specified")
        }

        if(CODEPUSH_DESCRIPTION == ''){
            throw new Exception("Description is not specified")
        }
        
        stage('Copy Artifacts') {
            timeout(time: 30, unit: 'MINUTES') {
                
                try {
                    
                   step([$class: 'CopyArtifact',
                          projectName: "${PROJECT_NAME}/${RELEASE_BRANCH_NAME}",
                          // selector: [$class: 'StatusBuildSelector', stable: true],
                          selector: [$class: 'SpecificBuildSelector', buildNumber: "${ARTIFACT_BUILD_VERSION}"],
                          target: 'retrieved_artifacts/'
                    ])
        
                    sh 'ls -l retrieved_artifacts'
                    
                } catch (exception) {
                    
                    sh 'ls -l retrieved_artifacts'

                    echo "Copy Artifacts failed: ${exception}"
                    
                    
                    /*
                    powershell """
                        Expand-Archive -Path 'retrieved_artifacts\\Bundle-Windows.zip' -DestinationPath 'retrieved_artifacts\\CodePush-Windows\\' -Force
                    """
                    */
                }
            }
        }

        stage('Code Push Clean Directory') {
            timeout(time: 30, unit: 'MINUTES') {
              try {
                  if (fileExists('code-push-server')) {
                    bat 'rmdir /S /Q code-push-server' // For Windows
                  }
              } catch (exception) {
                  echo "Code push clean directory failed: ${exception}"
              }
            }
        }

        stage('Clone Code Push Server Repository') {
            timeout(time: 30, unit: 'MINUTES') {
              try {
                  bat "git clone https://github.com/ServiceMax-Engineering/code-push-server.git"
              } catch(exception) {
                  echo "Clone Code push server failed: ${exception}"
              }
            }
        }

        stage('Install CLI Globally') {
            timeout(time: 30, unit: 'MINUTES') {
              try {
                  dir('code-push-server/cli') {
                    bat 'nvm use 18'
                    bat 'npm install'
                    bat 'npm run build'
                    bat 'npm install -g .'
                  }
              } catch(exception) {
                  echo "Code push server CLI failed: ${exception}"
              }
            }
        }

        // stage('Login to ServieceMax app center') {
        //     timeout(time: 30, unit: 'MINUTES') {
        //       dir('code-push-server/cli') {
        //             bat 'code-push-standalone login --accessKey <accessKey>'
        //       }
        //     }
        // }

        stage('Releasing Updates') {
            timeout(time: 30, unit: 'MINUTES') {
              try {
                    
                    def codePushCommand = """
                    code-push-standalone release ${CODEPUSH_APPLICATION_NAME} ${WORKSPACE}/retrieved_artifacts/Bundle ${CODEPUSH_TARGET_VERSION} ^
                        --deploymentName ${CODEPUSH_DEPLOYMENT_MODE} ^
                        --description "${CODEPUSH_DESCRIPTION}" ^
                        --mandatory ^
                        --noDuplicateReleaseError
                    """
                    bat codePushCommand
                    
              } catch (exception) {
                  error "Build failed: ${exception}"
              }
            }
        }

        stage('Listing the updates') {
            timeout(time: 30, unit: 'MINUTES') {
              try {
                    def output = bat(script: "code-push-standalone deployment history ${CODEPUSH_APPLICATION_NAME} ${CODEPUSH_DEPLOYMENT_MODE} --format json", returnStdout: true, encoding: 'UTF-8').trim()
                    echo "CodePush Deployment History:\n${output}"

              } catch (exception) {
                  error "Listing the updates failed: ${exception}"
              }
            }
        }

    } catch (all) {
        // Clean up workspace on build failure
        step([$class: 'WsCleanup'])
        error "Build failed: ${all}"
        currentBuild.result = 'FAILURE'
    }

    // Clean up workspace on build failure
    step([$class: 'WsCleanup'])

}