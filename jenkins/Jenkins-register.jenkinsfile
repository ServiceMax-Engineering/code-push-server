// Jenkins job for registering or getting the access key using code-pushp-server 


properties([
  parameters(
    [booleanParam(
      name: 'PRODUCTION_INSTANCE',
      defaultValue: true,
      description: 'Register or Autheticate Jenkin Job with Dev Instance or Production Instance and get the access key'
    )]
  )
])


def SERVER_URL = 'https://codepush-dev2.azurewebsites.net'
try {
  if (env.PRODUCTION_INSTANCE != null && env.PRODUCTION_INSTANCE.toBoolean()) {
    // Use Production Server Url here
     SERVER_URL = 'https://codepush-smaxprod.azurewebsites.net/'
  }
} catch (all) {
  // Mode hasn't been provided, will fall back to 'debug'
  // This might happen on first build of a PR or if you blank out the MDOE
}

echo "Server Url: ${SERVER_URL}"

node('AWS_MFL_Node') {

         stage('Clean Directory') {
            timeout(time: 30, unit: 'MINUTES') {
              try {
                  if (fileExists('code-push-server')) {
                    bat 'rmdir /S /Q code-push-server' // For Windows
                  }
              } catch (exception) {
                  echo "Code push clean directory failed: ${exception}"
              }
            }
        }

        stage('Clone Code Push Server Repository') {
            timeout(time: 30, unit: 'MINUTES') {
                try {
                  bat "git clone https://github.com/ServiceMax-Engineering/code-push-server.git"
                } catch(exception) {
                  echo "Clone Code push server failed: ${exception}"
                }
            }
        }
        
        stage('Install CLI Globally') {
            timeout(time: 30, unit: 'MINUTES') {
               try {
                  dir('code-push-server/cli') {
                    bat 'nvm use 18'
                    bat 'npm install'
                    bat 'npm run build'
                    bat 'npm install -g .'
                  }
              } catch(exception) {
                  echo "Code push server CLI failed: ${exception}"
              }
            }
        }
        
        stage('Register CodePush Service') {
            timeout(time: 30, unit: 'MINUTES') {
              try {
                bat "code-push-standalone register ${SERVER_URL}"
              } catch(exception) {
                  echo "Register CodePush Service failed: ${exception}"
                  error "Register CodePush Service failed: ${exception}"
              }
            }
        }
  
}
